// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quorom.Databases;

#nullable disable

namespace Quorom.Migrations
{
    [DbContext(typeof(QuoromDbContext))]
    [Migration("20250410122604_SomeUpdate")]
    partial class SomeUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e6fbee75-1155-4cb4-b02b-d4f88aadbdc9",
                            ConcurrencyStamp = "e6fbee75-1155-4cb4-b02b-d4f88aadbdc9",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "cadd478a-f9af-48a7-b330-cf2be2d8e09f",
                            ConcurrencyStamp = "cadd478a-f9af-48a7-b330-cf2be2d8e09f",
                            Name = "Contributor",
                            NormalizedName = "CONTRIBUTOR"
                        },
                        new
                        {
                            Id = "8a900325-ec69-4329-bb61-77b5af5c9c1b",
                            ConcurrencyStamp = "8a900325-ec69-4329-bb61-77b5af5c9c1b",
                            Name = "Deleter",
                            NormalizedName = "DELETER"
                        },
                        new
                        {
                            Id = "0a4a7818-ea98-48fe-84cf-fca6a1e6a117",
                            ConcurrencyStamp = "0a4a7818-ea98-48fe-84cf-fca6a1e6a117",
                            Name = "Modifier",
                            NormalizedName = "MODIFIER"
                        },
                        new
                        {
                            Id = "2129e86c-2306-46d5-9cfe-9eb91ba351be",
                            ConcurrencyStamp = "2129e86c-2306-46d5-9cfe-9eb91ba351be",
                            Name = "SuperUser",
                            NormalizedName = "SUPERUSER"
                        },
                        new
                        {
                            Id = "a3f97e34-b7cc-4e5f-8c97-1fb1e96738e7r",
                            ConcurrencyStamp = "a3f97e34-b7cc-4e5f-8c97-1fb1e96738e7r",
                            Name = "Viewer",
                            NormalizedName = "VIEWER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            RoleId = "e6fbee75-1155-4cb4-b02b-d4f88aadbdc9"
                        },
                        new
                        {
                            UserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            RoleId = "cadd478a-f9af-48a7-b330-cf2be2d8e09f"
                        },
                        new
                        {
                            UserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            RoleId = "8a900325-ec69-4329-bb61-77b5af5c9c1b"
                        },
                        new
                        {
                            UserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            RoleId = "0a4a7818-ea98-48fe-84cf-fca6a1e6a117"
                        },
                        new
                        {
                            UserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            RoleId = "2129e86c-2306-46d5-9cfe-9eb91ba351be"
                        },
                        new
                        {
                            UserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            RoleId = "a3f97e34-b7cc-4e5f-8c97-1fb1e96738e7r"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Quorom.DbTables.AuditLog", b =>
                {
                    b.Property<Guid>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssociatedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditLogId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Quorom.DbTables.Challenge", b =>
                {
                    b.Property<Guid>("ChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChallengeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ChallengeId");

                    b.HasIndex("ChallengeTypeId");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("Quorom.DbTables.ChallengeType", b =>
                {
                    b.Property<Guid>("ChallengeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ChallengeTypeId");

                    b.ToTable("ChallengeTypes");
                });

            modelBuilder.Entity("Quorom.DbTables.Initiative", b =>
                {
                    b.Property<Guid>("InitiativeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InitiativeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("InitiativeId");

                    b.HasIndex("InitiativeTypeId");

                    b.ToTable("Initiatives");
                });

            modelBuilder.Entity("Quorom.DbTables.InitiativeType", b =>
                {
                    b.Property<Guid>("InitiativeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("InitiativeTypeId");

                    b.ToTable("InitiativeTypes");

                    b.HasData(
                        new
                        {
                            InitiativeTypeId = new Guid("3c1fbfa6-b888-41af-9527-c9a2a968911b"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Education",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Education",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InitiativeTypeId = new Guid("dbec15a2-001d-4134-85f8-8b8fa1f93615"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Environment",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Environment",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InitiativeTypeId = new Guid("e5789a21-bbec-4926-990c-2949ecc316ae"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Financial",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Financial",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InitiativeTypeId = new Guid("e538bef6-b817-488c-b104-79873b006fcf"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Health",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Health",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InitiativeTypeId = new Guid("013d47cc-bc96-402a-8629-fb0edc1a9e5e"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Health",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Health",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InitiativeTypeId = new Guid("d2348d99-f8a7-41ef-a076-5521b0c64ddd"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Policy",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Policy",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InitiativeTypeId = new Guid("4259e1ed-654c-4f68-add2-372dd5c0d9ca"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Security",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Security",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InitiativeTypeId = new Guid("2d136539-d9e7-467a-9348-1eaf1e1ba625"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Strategic",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Strategic",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Quorom.DbTables.Item", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActualStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActualStopDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PersonResponsible")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StopDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ItemId");

                    b.HasIndex("ItemTypeId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Quorom.DbTables.ItemType", b =>
                {
                    b.Property<Guid>("ItemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ItemTypeId");

                    b.ToTable("ItemTypes");
                });

            modelBuilder.Entity("Quorom.DbTables.NotificationGroup", b =>
                {
                    b.Property<Guid>("NotificationGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("NotificationGroupId");

                    b.ToTable("NotificationGroups");
                });

            modelBuilder.Entity("Quorom.DbTables.NotificationGroupRecipient", b =>
                {
                    b.Property<Guid>("NotificationGroupRecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("NotificationGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("NotificationGroupRecipientId");

                    b.HasIndex("NotificationGroupId");

                    b.HasIndex("RecipientId");

                    b.ToTable("NotificationGroupRecipients");
                });

            modelBuilder.Entity("Quorom.DbTables.NotificationLog", b =>
                {
                    b.Property<Guid>("NotificationLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("NotificationGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationLogId");

                    b.ToTable("NotificationLogs");
                });

            modelBuilder.Entity("Quorom.DbTables.Recipient", b =>
                {
                    b.Property<Guid>("RecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("RecipientId");

                    b.ToTable("Recipients");
                });

            modelBuilder.Entity("Quorom.DbTables.QuoromUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("QuoromUser");

                    b.HasData(
                        new
                        {
                            Id = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d4ba709c-9914-4c17-a8ea-437f03777371",
                            Email = "nkosi.alexander@gov.tt",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NKOSI.ALEXANDER@GOV.TT",
                            NormalizedUserName = "NKOSI.ALEXANDER@GOV.TT",
                            PasswordHash = "AQAAAAIAAYagAAAAEC0mfbeguekgZfTqME1qAf8ZwtFNIModr3ZTLmwSFO7D7q4RNuvFIqamXzBSj+2FDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d9213b8d-e229-43e9-87b6-4d95eac7fc48",
                            TwoFactorEnabled = false,
                            UserName = "nkosi.alexander@gov.tt",
                            CreatedByUserId = "nkosi.alexander@gov.tt",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Quorom",
                            LastName = "Administrator",
                            Position = "Super Administrator",
                            UpdatedByUserId = "nkosi.alexander@gov.tt",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quorom.DbTables.Challenge", b =>
                {
                    b.HasOne("Quorom.DbTables.ChallengeType", "ChallengeType")
                        .WithMany("Challenges")
                        .HasForeignKey("ChallengeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChallengeType");
                });

            modelBuilder.Entity("Quorom.DbTables.Initiative", b =>
                {
                    b.HasOne("Quorom.DbTables.InitiativeType", "InitiativeType")
                        .WithMany("Initiatives")
                        .HasForeignKey("InitiativeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InitiativeType");
                });

            modelBuilder.Entity("Quorom.DbTables.Item", b =>
                {
                    b.HasOne("Quorom.DbTables.ItemType", "ItemType")
                        .WithMany("Items")
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("Quorom.DbTables.NotificationGroupRecipient", b =>
                {
                    b.HasOne("Quorom.DbTables.NotificationGroup", "NotificationGroup")
                        .WithMany()
                        .HasForeignKey("NotificationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quorom.DbTables.Recipient", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationGroup");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("Quorom.DbTables.ChallengeType", b =>
                {
                    b.Navigation("Challenges");
                });

            modelBuilder.Entity("Quorom.DbTables.InitiativeType", b =>
                {
                    b.Navigation("Initiatives");
                });

            modelBuilder.Entity("Quorom.DbTables.ItemType", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
