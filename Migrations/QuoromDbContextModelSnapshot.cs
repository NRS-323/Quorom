// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quorom.Databases;

#nullable disable

namespace Quorom.Migrations
{
    [DbContext(typeof(QuoromDbContext))]
    partial class QuoromDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e6fbee75-1155-4cb4-b02b-d4f88aadbdc9",
                            ConcurrencyStamp = "e6fbee75-1155-4cb4-b02b-d4f88aadbdc9",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "cadd478a-f9af-48a7-b330-cf2be2d8e09f",
                            ConcurrencyStamp = "cadd478a-f9af-48a7-b330-cf2be2d8e09f",
                            Name = "Contributor",
                            NormalizedName = "CONTRIBUTOR"
                        },
                        new
                        {
                            Id = "8a900325-ec69-4329-bb61-77b5af5c9c1b",
                            ConcurrencyStamp = "8a900325-ec69-4329-bb61-77b5af5c9c1b",
                            Name = "Deleter",
                            NormalizedName = "DELETER"
                        },
                        new
                        {
                            Id = "0a4a7818-ea98-48fe-84cf-fca6a1e6a117",
                            ConcurrencyStamp = "0a4a7818-ea98-48fe-84cf-fca6a1e6a117",
                            Name = "Modifier",
                            NormalizedName = "MODIFIER"
                        },
                        new
                        {
                            Id = "2129e86c-2306-46d5-9cfe-9eb91ba351be",
                            ConcurrencyStamp = "2129e86c-2306-46d5-9cfe-9eb91ba351be",
                            Name = "SuperUser",
                            NormalizedName = "SUPERUSER"
                        },
                        new
                        {
                            Id = "a3f97e34-b7cc-4e5f-8c97-1fb1e96738e7r",
                            ConcurrencyStamp = "a3f97e34-b7cc-4e5f-8c97-1fb1e96738e7r",
                            Name = "Viewer",
                            NormalizedName = "VIEWER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            RoleId = "e6fbee75-1155-4cb4-b02b-d4f88aadbdc9"
                        },
                        new
                        {
                            UserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            RoleId = "cadd478a-f9af-48a7-b330-cf2be2d8e09f"
                        },
                        new
                        {
                            UserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            RoleId = "8a900325-ec69-4329-bb61-77b5af5c9c1b"
                        },
                        new
                        {
                            UserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            RoleId = "0a4a7818-ea98-48fe-84cf-fca6a1e6a117"
                        },
                        new
                        {
                            UserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            RoleId = "2129e86c-2306-46d5-9cfe-9eb91ba351be"
                        },
                        new
                        {
                            UserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            RoleId = "a3f97e34-b7cc-4e5f-8c97-1fb1e96738e7r"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Quorom.DbTables.AuditLog", b =>
                {
                    b.Property<Guid>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssociatedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditLogId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Quorom.DbTables.Challenge", b =>
                {
                    b.Property<Guid>("ChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChallengeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ChallengeId");

                    b.HasIndex("ChallengeTypeId");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("Quorom.DbTables.ChallengeType", b =>
                {
                    b.Property<Guid>("ChallengeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ChallengeTypeId");

                    b.ToTable("ChallengeTypes");

                    b.HasData(
                        new
                        {
                            ChallengeTypeId = new Guid("89733f5b-c28a-43b2-9dc2-14466e5a37b5"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Accountability",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Accountability",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ChallengeTypeId = new Guid("3992af8b-fffa-4461-ba9b-7bb6b0d93d32"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ambiguity",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Ambiguity",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ChallengeTypeId = new Guid("109b6f41-e097-4b86-9fec-b50d5d8c41cc"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Budget",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Budget",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ChallengeTypeId = new Guid("94d94923-3a98-46f1-a4c2-cf04f4833dde"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Communication",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Communication",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ChallengeTypeId = new Guid("7d19481f-6bcc-41ae-8345-ca2ce0aef87b"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conflict",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Conflict",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ChallengeTypeId = new Guid("86821e87-4ff8-4f36-9d26-da6e5ea31db3"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Competency",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Competency",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ChallengeTypeId = new Guid("584220b7-26e4-4a9e-8333-e86bfea55794"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Deadline",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Deadline",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ChallengeTypeId = new Guid("15946387-7783-480d-b7e6-c7e1729c4bd6"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Goal",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Goal",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ChallengeTypeId = new Guid("5877bd14-a5f3-42d3-957f-2f44661d48f4"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Resource",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Resource",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ChallengeTypeId = new Guid("89a2201f-5e96-4adb-b6d6-1b2a2091f6a5"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Risk",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Risk",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ChallengeTypeId = new Guid("be252507-8103-43df-b7d3-2f5ea1bc4d46"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Scope Creep",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Scope Creep",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ChallengeTypeId = new Guid("2701c191-a3f4-4d01-8382-2ab7820d67cf"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Scheduling",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Scheduling",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ChallengeTypeId = new Guid("2ee65cee-fd07-45f1-83ef-347c64da6ef5"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Stakeholder",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Stakeholder",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ChallengeTypeId = new Guid("3adb434e-7cb6-447b-af2d-2834a69d0f74"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Technology",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Technology",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Quorom.DbTables.Initiative", b =>
                {
                    b.Property<Guid>("InitiativeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InitiativeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("InitiativeId");

                    b.HasIndex("InitiativeTypeId");

                    b.ToTable("Initiatives");
                });

            modelBuilder.Entity("Quorom.DbTables.InitiativeTask", b =>
                {
                    b.Property<Guid>("InitiativeTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InitiativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("InitiativeTaskId");

                    b.HasIndex("InitiativeId");

                    b.HasIndex("TaskId");

                    b.ToTable("InitiativeTasks");
                });

            modelBuilder.Entity("Quorom.DbTables.InitiativeType", b =>
                {
                    b.Property<Guid>("InitiativeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("InitiativeTypeId");

                    b.ToTable("InitiativeTypes");

                    b.HasData(
                        new
                        {
                            InitiativeTypeId = new Guid("3c1fbfa6-b888-41af-9527-c9a2a968911b"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Education",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Education",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InitiativeTypeId = new Guid("dbec15a2-001d-4134-85f8-8b8fa1f93615"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Environment",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Environment",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InitiativeTypeId = new Guid("e5789a21-bbec-4926-990c-2949ecc316ae"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Financial",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Financial",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InitiativeTypeId = new Guid("e538bef6-b817-488c-b104-79873b006fcf"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Health",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Health",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InitiativeTypeId = new Guid("013d47cc-bc96-402a-8629-fb0edc1a9e5e"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Health",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Health",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InitiativeTypeId = new Guid("d2348d99-f8a7-41ef-a076-5521b0c64ddd"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Policy",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Policy",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InitiativeTypeId = new Guid("4259e1ed-654c-4f68-add2-372dd5c0d9ca"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Security",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Security",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InitiativeTypeId = new Guid("2d136539-d9e7-467a-9348-1eaf1e1ba625"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Strategic",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Strategic",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Quorom.DbTables.NotificationGroup", b =>
                {
                    b.Property<Guid>("NotificationGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("NotificationGroupId");

                    b.ToTable("NotificationGroups");
                });

            modelBuilder.Entity("Quorom.DbTables.NotificationGroupQuoromite", b =>
                {
                    b.Property<Guid>("NotificationGroupQuoromiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("NotificationGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuoromiteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("NotificationGroupQuoromiteId");

                    b.HasIndex("NotificationGroupId");

                    b.HasIndex("QuoromiteId");

                    b.ToTable("NotificationGroupQuoromites");
                });

            modelBuilder.Entity("Quorom.DbTables.NotificationLog", b =>
                {
                    b.Property<Guid>("NotificationLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("NotificationGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationLogId");

                    b.ToTable("NotificationLogs");
                });

            modelBuilder.Entity("Quorom.DbTables.Quoromite", b =>
                {
                    b.Property<Guid>("QuoromiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("QuoromiteId");

                    b.ToTable("Quoromites");
                });

            modelBuilder.Entity("Quorom.DbTables.Task", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActualStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActualStopDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PlannedStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlannedStopDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaskTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("TaskId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Quorom.DbTables.TaskChallenge", b =>
                {
                    b.Property<Guid>("TaskChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChallengeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("TaskChallengeId");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskChallenges");
                });

            modelBuilder.Entity("Quorom.DbTables.TaskType", b =>
                {
                    b.Property<Guid>("TaskTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("TaskTypeId");

                    b.ToTable("TaskTypes");

                    b.HasData(
                        new
                        {
                            TaskTypeId = new Guid("410b8c41-fea2-481d-b129-ae4fe6e04c08"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Approval",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Approval",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TaskTypeId = new Guid("e7642e73-5b67-4c8e-b1bb-aab4043375bb"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Coordinated",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Coordinated",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TaskTypeId = new Guid("9baba539-467d-4668-b2bf-2d8bb9dacf40"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dependency",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Dependency",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TaskTypeId = new Guid("8cbb73c4-e357-4593-a157-248dd0039f3a"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Follow-Up",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Follow-Up",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TaskTypeId = new Guid("3843a8a3-5242-494b-97f6-e5f8bef8dac6"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Incidental",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Incidental",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TaskTypeId = new Guid("fb74d606-84f4-4812-aa8b-07a49d0a94fc"),
                            CreatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Planned",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Planned",
                            UpdatedByUserId = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("QuoromiteTask", b =>
                {
                    b.Property<Guid>("QuoromitesQuoromiteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TasksTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuoromitesQuoromiteId", "TasksTaskId");

                    b.HasIndex("TasksTaskId");

                    b.ToTable("QuoromiteTask");
                });

            modelBuilder.Entity("Quorom.DbTables.QuoromUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOnDateTime")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("QuoromUser");

                    b.HasData(
                        new
                        {
                            Id = "04df40e8-9f90-4bcd-83a2-c3a57bf7abd5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bad296a9-ee03-4a0b-9067-82ebecc815be",
                            Email = "nkosi.alexander@gov.tt",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NKOSI.ALEXANDER@GOV.TT",
                            NormalizedUserName = "NKOSI.ALEXANDER@GOV.TT",
                            PasswordHash = "AQAAAAIAAYagAAAAEMlRElWtvkS6ABz3VmaO/eI8G2Ro/TmUQSlcHZFRNtGdXerE5NYsmbX6nHgqOnj0jA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac70f996-f1ad-494a-a87b-44ec6996a2be",
                            TwoFactorEnabled = false,
                            UserName = "nkosi.alexander@gov.tt",
                            CreatedByUserId = "nkosi.alexander@gov.tt",
                            CreatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Quorom",
                            LastName = "Administrator",
                            Position = "Super Administrator",
                            UpdatedByUserId = "nkosi.alexander@gov.tt",
                            UpdatedOnDateTime = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quorom.DbTables.Challenge", b =>
                {
                    b.HasOne("Quorom.DbTables.ChallengeType", "ChallengeType")
                        .WithMany("Challenges")
                        .HasForeignKey("ChallengeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChallengeType");
                });

            modelBuilder.Entity("Quorom.DbTables.Initiative", b =>
                {
                    b.HasOne("Quorom.DbTables.InitiativeType", "InitiativeType")
                        .WithMany("Initiatives")
                        .HasForeignKey("InitiativeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InitiativeType");
                });

            modelBuilder.Entity("Quorom.DbTables.InitiativeTask", b =>
                {
                    b.HasOne("Quorom.DbTables.Initiative", "Initiative")
                        .WithMany()
                        .HasForeignKey("InitiativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quorom.DbTables.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiative");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Quorom.DbTables.NotificationGroupQuoromite", b =>
                {
                    b.HasOne("Quorom.DbTables.NotificationGroup", "NotificationGroup")
                        .WithMany()
                        .HasForeignKey("NotificationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quorom.DbTables.Quoromite", "Quoromite")
                        .WithMany()
                        .HasForeignKey("QuoromiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationGroup");

                    b.Navigation("Quoromite");
                });

            modelBuilder.Entity("Quorom.DbTables.Task", b =>
                {
                    b.HasOne("Quorom.DbTables.TaskType", "TaskType")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("Quorom.DbTables.TaskChallenge", b =>
                {
                    b.HasOne("Quorom.DbTables.Challenge", "Challenge")
                        .WithMany()
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quorom.DbTables.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("QuoromiteTask", b =>
                {
                    b.HasOne("Quorom.DbTables.Quoromite", null)
                        .WithMany()
                        .HasForeignKey("QuoromitesQuoromiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quorom.DbTables.Task", null)
                        .WithMany()
                        .HasForeignKey("TasksTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quorom.DbTables.ChallengeType", b =>
                {
                    b.Navigation("Challenges");
                });

            modelBuilder.Entity("Quorom.DbTables.InitiativeType", b =>
                {
                    b.Navigation("Initiatives");
                });

            modelBuilder.Entity("Quorom.DbTables.TaskType", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
